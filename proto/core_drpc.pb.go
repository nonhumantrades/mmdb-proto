// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.34
// source: core.proto

package proto

import (
	context "context"
	errors "errors"
	drpc1 "github.com/planetscale/vtprotobuf/codec/drpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_core_proto struct{}

func (drpcEncoding_File_core_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return drpc1.Marshal(msg)
}

func (drpcEncoding_File_core_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return drpc1.Unmarshal(buf, msg)
}

func (drpcEncoding_File_core_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return drpc1.JSONMarshal(msg)
}

func (drpcEncoding_File_core_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return drpc1.JSONUnmarshal(buf, msg)
}

type DRPCMMDBClient interface {
	DRPCConn() drpc.Conn

	CreateTable(ctx context.Context, in *CreateTableRequest) (*CreateTableResponse, error)
	DropTable(ctx context.Context, in *DropTableRequest) (*DropTableResponse, error)
	Insert(ctx context.Context, in *InsertRequest) (*InsertResponse, error)
	Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error)
	Query(ctx context.Context, in *QueryRequest) (*QueryResponse, error)
	StreamQuery(ctx context.Context, in *QueryRequest) (DRPCMMDB_StreamQueryClient, error)
	GetTable(ctx context.Context, in *GetTableRequest) (*GetTableResponse, error)
	ListTables(ctx context.Context, in *Empty) (*ListTablesResponse, error)
	SyncTable(ctx context.Context, in *SyncTableRequest) (*SyncTableResponse, error)
	Backup(ctx context.Context, in *BackupRequest) (DRPCMMDB_BackupClient, error)
	BackupToS3(ctx context.Context, in *S3BackupRequest) (DRPCMMDB_BackupToS3Client, error)
	RestoreFromS3(ctx context.Context, in *RestoreFromS3Request) (DRPCMMDB_RestoreFromS3Client, error)
}

type drpcMMDBClient struct {
	cc drpc.Conn
}

func NewDRPCMMDBClient(cc drpc.Conn) DRPCMMDBClient {
	return &drpcMMDBClient{cc}
}

func (c *drpcMMDBClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcMMDBClient) CreateTable(ctx context.Context, in *CreateTableRequest) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, "/mmdb.MMDB/CreateTable", drpcEncoding_File_core_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMMDBClient) DropTable(ctx context.Context, in *DropTableRequest) (*DropTableResponse, error) {
	out := new(DropTableResponse)
	err := c.cc.Invoke(ctx, "/mmdb.MMDB/DropTable", drpcEncoding_File_core_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMMDBClient) Insert(ctx context.Context, in *InsertRequest) (*InsertResponse, error) {
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, "/mmdb.MMDB/Insert", drpcEncoding_File_core_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMMDBClient) Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/mmdb.MMDB/Delete", drpcEncoding_File_core_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMMDBClient) Query(ctx context.Context, in *QueryRequest) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/mmdb.MMDB/Query", drpcEncoding_File_core_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMMDBClient) StreamQuery(ctx context.Context, in *QueryRequest) (DRPCMMDB_StreamQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, "/mmdb.MMDB/StreamQuery", drpcEncoding_File_core_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcMMDB_StreamQueryClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_core_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCMMDB_StreamQueryClient interface {
	drpc.Stream
	Recv() (*StreamQueryChunk, error)
}

type drpcMMDB_StreamQueryClient struct {
	drpc.Stream
}

func (x *drpcMMDB_StreamQueryClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMMDB_StreamQueryClient) Recv() (*StreamQueryChunk, error) {
	m := new(StreamQueryChunk)
	if err := x.MsgRecv(m, drpcEncoding_File_core_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMMDB_StreamQueryClient) RecvMsg(m *StreamQueryChunk) error {
	return x.MsgRecv(m, drpcEncoding_File_core_proto{})
}

func (c *drpcMMDBClient) GetTable(ctx context.Context, in *GetTableRequest) (*GetTableResponse, error) {
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, "/mmdb.MMDB/GetTable", drpcEncoding_File_core_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMMDBClient) ListTables(ctx context.Context, in *Empty) (*ListTablesResponse, error) {
	out := new(ListTablesResponse)
	err := c.cc.Invoke(ctx, "/mmdb.MMDB/ListTables", drpcEncoding_File_core_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMMDBClient) SyncTable(ctx context.Context, in *SyncTableRequest) (*SyncTableResponse, error) {
	out := new(SyncTableResponse)
	err := c.cc.Invoke(ctx, "/mmdb.MMDB/SyncTable", drpcEncoding_File_core_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMMDBClient) Backup(ctx context.Context, in *BackupRequest) (DRPCMMDB_BackupClient, error) {
	stream, err := c.cc.NewStream(ctx, "/mmdb.MMDB/Backup", drpcEncoding_File_core_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcMMDB_BackupClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_core_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCMMDB_BackupClient interface {
	drpc.Stream
	Recv() (*BackupChunk, error)
}

type drpcMMDB_BackupClient struct {
	drpc.Stream
}

func (x *drpcMMDB_BackupClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMMDB_BackupClient) Recv() (*BackupChunk, error) {
	m := new(BackupChunk)
	if err := x.MsgRecv(m, drpcEncoding_File_core_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMMDB_BackupClient) RecvMsg(m *BackupChunk) error {
	return x.MsgRecv(m, drpcEncoding_File_core_proto{})
}

func (c *drpcMMDBClient) BackupToS3(ctx context.Context, in *S3BackupRequest) (DRPCMMDB_BackupToS3Client, error) {
	stream, err := c.cc.NewStream(ctx, "/mmdb.MMDB/BackupToS3", drpcEncoding_File_core_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcMMDB_BackupToS3Client{stream}
	if err := x.MsgSend(in, drpcEncoding_File_core_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCMMDB_BackupToS3Client interface {
	drpc.Stream
	Recv() (*S3BackupChunk, error)
}

type drpcMMDB_BackupToS3Client struct {
	drpc.Stream
}

func (x *drpcMMDB_BackupToS3Client) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMMDB_BackupToS3Client) Recv() (*S3BackupChunk, error) {
	m := new(S3BackupChunk)
	if err := x.MsgRecv(m, drpcEncoding_File_core_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMMDB_BackupToS3Client) RecvMsg(m *S3BackupChunk) error {
	return x.MsgRecv(m, drpcEncoding_File_core_proto{})
}

func (c *drpcMMDBClient) RestoreFromS3(ctx context.Context, in *RestoreFromS3Request) (DRPCMMDB_RestoreFromS3Client, error) {
	stream, err := c.cc.NewStream(ctx, "/mmdb.MMDB/RestoreFromS3", drpcEncoding_File_core_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcMMDB_RestoreFromS3Client{stream}
	if err := x.MsgSend(in, drpcEncoding_File_core_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCMMDB_RestoreFromS3Client interface {
	drpc.Stream
	Recv() (*S3RestoreChunk, error)
}

type drpcMMDB_RestoreFromS3Client struct {
	drpc.Stream
}

func (x *drpcMMDB_RestoreFromS3Client) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcMMDB_RestoreFromS3Client) Recv() (*S3RestoreChunk, error) {
	m := new(S3RestoreChunk)
	if err := x.MsgRecv(m, drpcEncoding_File_core_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcMMDB_RestoreFromS3Client) RecvMsg(m *S3RestoreChunk) error {
	return x.MsgRecv(m, drpcEncoding_File_core_proto{})
}

type DRPCMMDBServer interface {
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	DropTable(context.Context, *DropTableRequest) (*DropTableResponse, error)
	Insert(context.Context, *InsertRequest) (*InsertResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	StreamQuery(*QueryRequest, DRPCMMDB_StreamQueryStream) error
	GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error)
	ListTables(context.Context, *Empty) (*ListTablesResponse, error)
	SyncTable(context.Context, *SyncTableRequest) (*SyncTableResponse, error)
	Backup(*BackupRequest, DRPCMMDB_BackupStream) error
	BackupToS3(*S3BackupRequest, DRPCMMDB_BackupToS3Stream) error
	RestoreFromS3(*RestoreFromS3Request, DRPCMMDB_RestoreFromS3Stream) error
}

type DRPCMMDBUnimplementedServer struct{}

func (s *DRPCMMDBUnimplementedServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMMDBUnimplementedServer) DropTable(context.Context, *DropTableRequest) (*DropTableResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMMDBUnimplementedServer) Insert(context.Context, *InsertRequest) (*InsertResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMMDBUnimplementedServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMMDBUnimplementedServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMMDBUnimplementedServer) StreamQuery(*QueryRequest, DRPCMMDB_StreamQueryStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMMDBUnimplementedServer) GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMMDBUnimplementedServer) ListTables(context.Context, *Empty) (*ListTablesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMMDBUnimplementedServer) SyncTable(context.Context, *SyncTableRequest) (*SyncTableResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMMDBUnimplementedServer) Backup(*BackupRequest, DRPCMMDB_BackupStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMMDBUnimplementedServer) BackupToS3(*S3BackupRequest, DRPCMMDB_BackupToS3Stream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCMMDBUnimplementedServer) RestoreFromS3(*RestoreFromS3Request, DRPCMMDB_RestoreFromS3Stream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCMMDBDescription struct{}

func (DRPCMMDBDescription) NumMethods() int { return 12 }

func (DRPCMMDBDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/mmdb.MMDB/CreateTable", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMMDBServer).
					CreateTable(
						ctx,
						in1.(*CreateTableRequest),
					)
			}, DRPCMMDBServer.CreateTable, true
	case 1:
		return "/mmdb.MMDB/DropTable", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMMDBServer).
					DropTable(
						ctx,
						in1.(*DropTableRequest),
					)
			}, DRPCMMDBServer.DropTable, true
	case 2:
		return "/mmdb.MMDB/Insert", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMMDBServer).
					Insert(
						ctx,
						in1.(*InsertRequest),
					)
			}, DRPCMMDBServer.Insert, true
	case 3:
		return "/mmdb.MMDB/Delete", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMMDBServer).
					Delete(
						ctx,
						in1.(*DeleteRequest),
					)
			}, DRPCMMDBServer.Delete, true
	case 4:
		return "/mmdb.MMDB/Query", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMMDBServer).
					Query(
						ctx,
						in1.(*QueryRequest),
					)
			}, DRPCMMDBServer.Query, true
	case 5:
		return "/mmdb.MMDB/StreamQuery", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCMMDBServer).
					StreamQuery(
						in1.(*QueryRequest),
						&drpcMMDB_StreamQueryStream{in2.(drpc.Stream)},
					)
			}, DRPCMMDBServer.StreamQuery, true
	case 6:
		return "/mmdb.MMDB/GetTable", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMMDBServer).
					GetTable(
						ctx,
						in1.(*GetTableRequest),
					)
			}, DRPCMMDBServer.GetTable, true
	case 7:
		return "/mmdb.MMDB/ListTables", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMMDBServer).
					ListTables(
						ctx,
						in1.(*Empty),
					)
			}, DRPCMMDBServer.ListTables, true
	case 8:
		return "/mmdb.MMDB/SyncTable", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMMDBServer).
					SyncTable(
						ctx,
						in1.(*SyncTableRequest),
					)
			}, DRPCMMDBServer.SyncTable, true
	case 9:
		return "/mmdb.MMDB/Backup", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCMMDBServer).
					Backup(
						in1.(*BackupRequest),
						&drpcMMDB_BackupStream{in2.(drpc.Stream)},
					)
			}, DRPCMMDBServer.Backup, true
	case 10:
		return "/mmdb.MMDB/BackupToS3", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCMMDBServer).
					BackupToS3(
						in1.(*S3BackupRequest),
						&drpcMMDB_BackupToS3Stream{in2.(drpc.Stream)},
					)
			}, DRPCMMDBServer.BackupToS3, true
	case 11:
		return "/mmdb.MMDB/RestoreFromS3", drpcEncoding_File_core_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCMMDBServer).
					RestoreFromS3(
						in1.(*RestoreFromS3Request),
						&drpcMMDB_RestoreFromS3Stream{in2.(drpc.Stream)},
					)
			}, DRPCMMDBServer.RestoreFromS3, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterMMDB(mux drpc.Mux, impl DRPCMMDBServer) error {
	return mux.Register(impl, DRPCMMDBDescription{})
}

type DRPCMMDB_CreateTableStream interface {
	drpc.Stream
	SendAndClose(*CreateTableResponse) error
}

type drpcMMDB_CreateTableStream struct {
	drpc.Stream
}

func (x *drpcMMDB_CreateTableStream) SendAndClose(m *CreateTableResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_core_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMMDB_DropTableStream interface {
	drpc.Stream
	SendAndClose(*DropTableResponse) error
}

type drpcMMDB_DropTableStream struct {
	drpc.Stream
}

func (x *drpcMMDB_DropTableStream) SendAndClose(m *DropTableResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_core_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMMDB_InsertStream interface {
	drpc.Stream
	SendAndClose(*InsertResponse) error
}

type drpcMMDB_InsertStream struct {
	drpc.Stream
}

func (x *drpcMMDB_InsertStream) SendAndClose(m *InsertResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_core_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMMDB_DeleteStream interface {
	drpc.Stream
	SendAndClose(*DeleteResponse) error
}

type drpcMMDB_DeleteStream struct {
	drpc.Stream
}

func (x *drpcMMDB_DeleteStream) SendAndClose(m *DeleteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_core_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMMDB_QueryStream interface {
	drpc.Stream
	SendAndClose(*QueryResponse) error
}

type drpcMMDB_QueryStream struct {
	drpc.Stream
}

func (x *drpcMMDB_QueryStream) SendAndClose(m *QueryResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_core_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMMDB_StreamQueryStream interface {
	drpc.Stream
	Send(*StreamQueryChunk) error
}

type drpcMMDB_StreamQueryStream struct {
	drpc.Stream
}

func (x *drpcMMDB_StreamQueryStream) Send(m *StreamQueryChunk) error {
	return x.MsgSend(m, drpcEncoding_File_core_proto{})
}

type DRPCMMDB_GetTableStream interface {
	drpc.Stream
	SendAndClose(*GetTableResponse) error
}

type drpcMMDB_GetTableStream struct {
	drpc.Stream
}

func (x *drpcMMDB_GetTableStream) SendAndClose(m *GetTableResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_core_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMMDB_ListTablesStream interface {
	drpc.Stream
	SendAndClose(*ListTablesResponse) error
}

type drpcMMDB_ListTablesStream struct {
	drpc.Stream
}

func (x *drpcMMDB_ListTablesStream) SendAndClose(m *ListTablesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_core_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMMDB_SyncTableStream interface {
	drpc.Stream
	SendAndClose(*SyncTableResponse) error
}

type drpcMMDB_SyncTableStream struct {
	drpc.Stream
}

func (x *drpcMMDB_SyncTableStream) SendAndClose(m *SyncTableResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_core_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMMDB_BackupStream interface {
	drpc.Stream
	Send(*BackupChunk) error
}

type drpcMMDB_BackupStream struct {
	drpc.Stream
}

func (x *drpcMMDB_BackupStream) Send(m *BackupChunk) error {
	return x.MsgSend(m, drpcEncoding_File_core_proto{})
}

type DRPCMMDB_BackupToS3Stream interface {
	drpc.Stream
	Send(*S3BackupChunk) error
}

type drpcMMDB_BackupToS3Stream struct {
	drpc.Stream
}

func (x *drpcMMDB_BackupToS3Stream) Send(m *S3BackupChunk) error {
	return x.MsgSend(m, drpcEncoding_File_core_proto{})
}

type DRPCMMDB_RestoreFromS3Stream interface {
	drpc.Stream
	Send(*S3RestoreChunk) error
}

type drpcMMDB_RestoreFromS3Stream struct {
	drpc.Stream
}

func (x *drpcMMDB_RestoreFromS3Stream) Send(m *S3RestoreChunk) error {
	return x.MsgSend(m, drpcEncoding_File_core_proto{})
}
